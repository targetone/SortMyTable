/*!
 * SortMyTable - Biblioteca de ordenação de tabelas HTML
 * Desenvolvido por Target One
 * GitHub: https://github.com/targetone/SortMyTable
 */
class SortMyTable{constructor(e){if(!(e&&e instanceof HTMLTableElement))throw new Error("Invalid table element");this.table=e,this.headers=Array.from(this.table.querySelectorAll("th")),this.currentSorting={},this.headers.forEach(((e,t)=>{e.hasAttribute("data-sort-ignore")||e.addEventListener("click",(()=>this.sortColumn(t)))}))}sortColumn(e){const t=this.headers[e],r=t.hasAttribute("data-is-number"),s=t.hasAttribute("data-is-date"),a="ascending"===t.getAttribute("aria-sort")?"descending":"ascending";this.headers.forEach((e=>e.removeAttribute("aria-sort"))),t.setAttribute("aria-sort",a);const n=Array.from(this.table.tBodies[0].rows);n.sort(((t,n)=>this.compareCells(t.cells[e],n.cells[e],r,s,a))),n.forEach((e=>this.table.tBodies[0].appendChild(e))),this.currentSorting={index:e,order:a}}compareCells(e,t,r,s,a){const n=e.textContent.trim(),i=t.textContent.trim();if(r){const e=this.parseNumber(n),t=this.parseNumber(i);return"ascending"===a?e-t:t-e}if(s){const e=this.parseDate(n),t=this.parseDate(i);return"ascending"===a?e-t:t-e}return"ascending"===a?n.localeCompare(i):i.localeCompare(n)}parseNumber(e){let t=e.replace(/[^0-9.,-]+/g,"").trim();t.includes(",")&&t.includes(".")?t=t.replace(/,/g,""):t.includes(",")&&(t=t.replace(/\./g,"").replace(",","."));const r=parseFloat(t);return isNaN(r)?99999999999:r}parseDate(e){const t=[{regex:/^\d{4}-\d{2}-\d{2}$/,parse:e=>{const[t,r,s]=e.split("-");return new Date(t,r-1,s)}},{regex:/^\d{2}\/\d{2}\/\d{4}$/,parse:e=>{const[t,r,s]=e.split("/");return new Date(s,r-1,t)}},{regex:/^\d{2}-\d{2}-\d{4}$/,parse:e=>{const[t,r,s]=e.split("-");return new Date(s,r-1,t)}},{regex:/^\d{4}\/\d{2}\/\d{2}$/,parse:e=>{const[t,r,s]=e.split("/");return new Date(t,r-1,s)}},{regex:/^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}:\d{2}$/,parse:e=>{const[t,r]=e.split(" "),[s,a,n]=t.split("/"),[i,o,d]=r.split(":");return new Date(n,a-1,s,i,o,d)}},{regex:/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/,parse:e=>new Date(e)},{regex:/^\d{2} \w{3} \d{4}$/,parse:e=>new Date(e)}];for(let r of t)if(r.regex.test(e))return r.parse(e);const r=new Date(e);return isNaN(r.getTime())?null:r}getSortingConfiguration(){return this.currentSorting}applySortingConfiguration(e){if(e&&"number"==typeof e.index&&e.order){this.sortColumn(e.index);this.headers[e.index].setAttribute("aria-sort",e.order)}}disableSorting(){this.headers.forEach((e=>{const t=e.cloneNode(!0);e.parentNode.replaceChild(t,e)}))}}